Тестове завдання для Yalantis

Tech Stack: React + Axios/Fetch
Задача: 
GET: `https://yalantis-react-school-api.yalantis.com/api/task0/users` повертає масив юзерів. У кожного юзера є наступні поля: id, firstName, lastName, dob (дата народження).

Реалізувати:

Завантажити список співробітників з сервера, при потраплянні на сторінку  employees
Відобразити англійський алфавіт.
Співробітник = lastName + firstName. Відобразити співробітників, за алфавітом, сортуємо за lastName. Якщо у літери немає співробітників, ставимо прочерк. Біля кожного співробітника є по 2 radioButton. По дефолту ‘not active’ (не активний), значення цього radio item буде = false
Якщо хочемо вибирати співробітника, натискаємо на ‘active’,  зі значенням = true. Обраний співробітник повинен бути виділений кольором.
У правій частині сторінки є блок Employees birthday, в якому відображаються обрані співробітники, згруповані за назвою місяця їх дня народження та відсортовані по їх lastName (від А до Я). 
Місяці повинні починатися з місяця виконання цього завдання і далі по черзі.
Якщо в місяці немає обраних співробітників/співробітника, назву місяця не виводимо.
Якщо ви не обрали нікого зі співробітників, то в блоці Employees birthday пишемо Employees List is empty
Якщо сторінку перезавантажено - обрані співробітники в правому блоку повинні бути збережені. А в лівому блоку Employees, у даних співробітників повинен бути активним radio item ‘active’

Вимоги до коду:
Використання Prettier.
Використання функціональних компонентів та хуків, ES6 features.
Мінімальний розподіл проекту на логічні частини / папки.

Вимоги до проекту:
Розгорнути додаток, використовуючи create-react-app.
Залити виконане завдання на один з хостинг-сервісів. Github page буде досить.
Використовувати UI ліби в проекті заборонено.
UI частина додатку залишається на ваш розсуд. Макет-шаблон, як повинно виглядати, ви знайдете нижче.                                                                                                                

Буде плюсом:
Використання Redux (redux-toolkit, redux-thunk/saga) та/або React Context в проекті.
Використання TypeScript або опис типізація за допомогою PropTypes.
Мінімально покрити unit-тестами логічні частини в проекті.
